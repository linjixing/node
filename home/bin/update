#!/usr/bin/env sh

[ -z "$USER" ] && USER="$(whoami)"
[ -z "$PASSWD" ] && PASSWD="password"
[ -z "$HOME" ] && HOME="eval echo ~$USER"
[ -z "$HOSTNAME" ] && HOSTNAME="$(hostname)"
[ -z "$HTTP_PORT" ] && HTTP_PORT=8080
[ -z "$TTYD_PORT" ] && TTYD_PORT=8081
[ -z "$ET_PORT" ] && ET_PORT=8082
[ -z "$XHTTP_PORT" ] && XHTTP_PORT=8083
[ -z "$TCP_PORT" ] && TCP_PORT=8443
[ -z "$WS_PORT" ] && WS_PORT=8880

cat > /home/supervisor.d/http.conf << EOF
[program:http]
command=/usr/bin/python3 -m http.server --bind 0.0.0.0 $HTTP_PORT --directory /home/http
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/http.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=root
EOF

cat > /home/supervisor.d/td.conf << EOF
[program:td]
umask=002
command=td -p $TTYD_PORT -t enableTrzsz=true -c $USER:$PASSWD -W bash
environment=HOME="$HOME",USER="$USER",LOGNAME="$USER"
directory=$HOME
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/td.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=$USER
EOF

if [ -n "$ET_IPV4" ]; then
    cat > /home/conf/et.toml << EOF
hostname = "$HOSTNAME"
instance_name = "$HOSTNAME"
dhcp = false
ipv4 = "$ET_IPV4"
listeners = ["ws://0.0.0.0:$ET_PORT/"]

[network_identity]
network_name = "et"
network_secret = "$PASSWD"

[flags]
no_tun = true
EOF

cat > /home/supervisor.d/et.conf << EOF
[program:et]
command=et -c /home/conf/et.toml
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/et.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=root
EOF
fi

if [ -n "$FS_ADDR" ] && [ -n "$FS_PORT" ]; then
    cat > /home/conf/fc.toml << EOF
serverAddr = "$FS_ADDR"
serverPort = $FS_PORT

[[proxies]]
name = "reality-$HOSTNAME"
type = "stcp"
secretKey = "$PASSWD"
localPort = $XHTTP_PORT

[[proxies]]
name = "tcp-$HOSTNAME"
type = "stcp"
secretKey = "$PASSWD"
localPort = $TCP_PORT
EOF

    cat > /home/supervisor.d/fc.conf << EOF
[program:fc]
command=fc -c /home/conf/fc.toml
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/fc.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=root
EOF
fi

if [ -n "$UUID" ]; then
    cat > /home/conf/xy.json << EOF
{
    "log": {
        "loglevel": "warning",
        "access": "none",
        "error": "/tmp/xy.log"
    },
    "dns": {
        "servers": [
            "1.1.1.1",
            "8.8.8.8"
        ]
    },
    "inbounds": [
        {
            "tag": "vless-xhttp-reality",
            "listen": "0.0.0.0",
            "port": $XHTTP_PORT,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$UUID"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "xhttp",
                "xhttpSettings": {
                    "path": "/"
                },
                "security": "reality",
                "realitySettings": {
                    "target": "www.microsoft.com:443",
                    "serverNames": [
                        "www.microsoft.com"
                    ],
                    "privateKey": "eKrdLnPDVWAljkPsg7JLWTiOJb50r3bD3y0UngGyv2Y",
                    "shortIds": [
                        "fa3f64af75b91e4c"
                    ]
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ]
            }
        },
        {
            "tag": "vless-ws",
            "listen": "0.0.0.0",
            "port": $WS_PORT,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$UUID"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "ws",
                "wsSettings": {
                    "path": "/"
                },
                "security": "none"
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ]
            }
        },
        {
            "tag": "vless-tcp",
            "listen": "0.0.0.0",
            "port": $TCP_PORT,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$UUID"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "tcp",
                "security": "none"
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ]
            }
        }
    ],
    "outbounds": [
        {
            "tag": "direct",
            "protocol": "freedom"
        },
        {
            "tag": "block",
            "protocol": "blackhole"
        }
    ]
}
EOF

    cat > /home/supervisor.d/xy.conf << EOF
[program:xy]
command=xy -c /home/conf/xy.json
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/xy.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=root
EOF
fi

[ -n "$TOKEN" ] && cat > /home/supervisor.d/cf.conf << EOF
[program:cf]
command=cf tunnel --no-autoupdate run --token $TOKEN
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/tmp/cf.log
stdout_logfile_maxbytes=3MB
stdout_logfile_backups=2
user=root
EOF

exec "$@"
